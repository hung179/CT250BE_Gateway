import { Injectable, UnauthorizedException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { RedisCacheService } from '../redisCache/redisCache.service'; // Redis ƒë·ªÉ l∆∞u refresh token
import * as bcrypt from 'bcrypt';
import { ConfigService } from '@nestjs/config';
import { AdminService } from 'src/microservices/admin/admin.service';
import { CustomerService } from 'src/microservices/customer/customer.service';
import { OtpService } from 'src/otp/otp.service';
import { EmailService } from 'src/email/email.service';

@Injectable()
export class AuthService {
  constructor(
    private jwtService: JwtService,
    private redisCacheService: RedisCacheService,
    private configService: ConfigService,
    private adminService: AdminService,
    private customerService: CustomerService,
    private otpService: OtpService,
    private emailService: EmailService
  ) {}

  // ƒêƒÉng nh·∫≠p v√† t·∫°o accessToken + refreshToken
  async login(user: any, userType: 'admin' | 'customer') {
    const payload = { userId: user._id };
    if (userType === 'admin') {
      payload['role'] = user.role;
    }
    const accessToken = this.jwtService.sign(payload, {
      secret: this.configService.get<string>('JWT_SECRET'),
      expiresIn: '15m',
    });
    const refreshToken = this.jwtService.sign(payload, {
      secret: this.configService.get<string>('JWT_REFRESH_SECRET'),
      expiresIn: '7d',
    });

    await this.redisCacheService.set(
      `refresh_token:${refreshToken}`,
      user._id,
      7 * 24 * 60 * 60
    );

    return { accessToken, refreshToken, userId: user._id };
  }

  // X√°c th·ª±c Admin
  async validateAdmin(username: string, password: string): Promise<any> {
    const admin: any = (
      await this.adminService.findBookStoreByUserName(username)
    ).data;
    if (!admin) throw new UnauthorizedException('Username kh√¥ng t·ªìn t·∫°i');

    // M√£ h√≥a v√† so s√°nh m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, admin.mk_NS);
    if (!isMatch) throw new UnauthorizedException('Sai m·∫≠t kh·∫©u');

    return admin; // Tr·∫£ v·ªÅ user n·∫øu x√°c th·ª±c th√†nh c√¥ng
  }

  // X√°c th·ª±c Customer
  async validateCustomer(email: string, password: string): Promise<any> {
    const customer: any = (await this.customerService.findUserByEmail(email))
      .data;
    if (!customer) throw new UnauthorizedException('Email kh√¥ng t·ªìn t·∫°i');

    // M√£ h√≥a v√† so s√°nh m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, customer.password_KH);
    if (!isMatch) throw new UnauthorizedException('Sai m·∫≠t kh·∫©u');

    return customer; // Tr·∫£ v·ªÅ user n·∫øu x√°c th·ª±c th√†nh c√¥ng
  }

  async loginWithEmailOtp(email: string, otp: string) {
    return this.verifyOtpAndGetToken(email, otp, 'login');
  }

  // G·ª≠i OTP cho ƒëƒÉng nh·∫≠p b·∫±ng email
  async sendLoginOtp(email: string) {
    // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
    const customer = await this.customerService.findUserByEmail(email);
    if (!customer.success) {
      throw new UnauthorizedException('Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
    }

    // T·∫°o OTP
    const otp = this.otpService.generateOtp();

    // L∆∞u OTP v√†o Redis v·ªõi key login:{email}
    await this.otpService.storeOtp(`login:${email}`, otp);

    // G·ª≠i OTP qua email
    const subject = 'M√£ ƒëƒÉng nh·∫≠p c·ªßa b·∫°n';
    const text = `M√£ ƒëƒÉng nh·∫≠p c·ªßa b·∫°n l√†: ${otp}. M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 60 gi√¢y.`;
    const html = `
      <h2>ƒêƒÉng nh·∫≠p v√†o h·ªá th·ªëng</h2>
      <p>M√£ ƒëƒÉng nh·∫≠p c·ªßa b·∫°n l√†: <strong>${otp}</strong></p>
      <p>M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 60 gi√¢y.</p>
    `;

    await this.emailService.sendMail(email, subject, text, html);

    return {
      success: true,
      message: 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n',
    };
  }

  // X·ª≠ l√Ω refresh token ƒë·ªÉ c·∫•p l·∫°i access token
  async refreshAccessToken(refreshToken: string) {
    try {
      // üîç Gi·∫£i m√£ refreshToken ƒë·ªÉ l·∫•y userId
      const payload = this.jwtService.verify(refreshToken, {
        secret: process.env.JWT_REFRESH_SECRET,
      });

      const userId = payload.userId;
      // üõ† Ki·ªÉm tra refreshToken trong Redis
      const tokenKey = `refresh_token:${refreshToken}`;
      const userIdInCache = await this.redisCacheService.get(tokenKey);
      const isValid = userIdInCache === userId;
      console.log(payload, isValid, userIdInCache);
      if (!isValid) {
        throw new UnauthorizedException('Invalid refresh token');
      }

      // // üîë T·∫°o accessToken m·ªõi
      const accessToken = this.jwtService.sign(
        { userId: payload.userId, role: payload.role },
        {
          secret: process.env.JWT_SECRET,
          expiresIn: '15m',
        }
      );

      return {
        accessToken,
        userId,
      };
    } catch (error) {
      console.log(error);
      return { error };
    }
  }

  // G·ª≠i OTP cho ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
  async sendPasswordResetOtp(email: string) {
    // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
    const customer = await this.customerService.findUserByEmail(email);
    if (!customer.success) {
      throw new UnauthorizedException('Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
    }

    // T·∫°o OTP
    const otp = this.otpService.generateOtp();

    // L∆∞u OTP v√†o Redis v·ªõi key reset:{email}
    await this.otpService.storeOtp(`reset:${email}`, otp);

    // G·ª≠i OTP qua email
    const subject = 'M√£ x√°c nh·∫≠n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u';
    const text = `M√£ x√°c nh·∫≠n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: ${otp}. M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 60 gi√¢y.`;
    const html = `
    <h2>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
    <p>M√£ x√°c nh·∫≠n c·ªßa b·∫°n l√†: <strong>${otp}</strong></p>
    <p>M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 60 gi√¢y.</p>
  `;

    await this.emailService.sendMail(email, subject, text, html);

    return {
      success: true,
      message: 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n',
    };
  }

  // H√†m x√°c th·ª±c OTP chung
  // H√†m x√°c th·ª±c OTP chung
async verifyOtpAndGetToken(email: string, otp: string, otpType: 'login' | 'reset'): Promise<any> {
  // T·∫°o key OTP d·ª±a v√†o lo·∫°i
  const otpKey = `${otpType}:${email}`;
  
  // X√°c th·ª±c OTP
  const isValidOtp = await this.otpService.verifyOtp(otpKey, otp);
  if (!isValidOtp) {
    throw new UnauthorizedException('M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
  }
  
  // T√¨m th√¥ng tin ng∆∞·ªùi d√πng
  const customer:any = await this.customerService.findUserByEmail(email);
  if (!customer.success) {
    throw new UnauthorizedException('Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
  }
  
  // T·∫°o v√† tr·∫£ v·ªÅ token, b·∫•t k·ªÉ l√† login hay reset
  const payload = { userId: customer.data._id };
  const accessToken = this.jwtService.sign(payload, {
    secret: this.configService.get<string>('JWT_SECRET'),
    expiresIn: '15m',
  });
  
  return {
    success: true,
    message: 'X√°c th·ª±c OTP th√†nh c√¥ng',
    userId: customer.data._id,
    accessToken: accessToken
  };
}

  // ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u v·ªõi accessToken ƒë√£ x√°c th·ª±c
  async resetPassword(email: string, accessToken: string, newPassword: string) {
    try {
      // X√°c th·ª±c accessToken
      const payload = this.jwtService.verify(accessToken, {
        secret: this.configService.get<string>('JWT_SECRET'),
      });

      // Ki·ªÉm tra xem accessToken c√≥ thu·ªôc v·ªÅ email n√†y kh√¥ng
      const customer: any = (await this.customerService.findUserByEmail(email))
        .data;
      console.log(customer);
      // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong database th√¥ng qua customerService
      const updateResult = await this.customerService.updateUser( 
        { password_KH: newPassword },
        customer._id
      );

      return {
        success: true,
        message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng',
      };
    } catch (error) {
      if (
        error.name === 'JsonWebTokenError' ||
        error.name === 'TokenExpiredError'
      ) {
        throw new UnauthorizedException('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
      }
      throw error;
    }
  }
  async logout(refreshToken: string) {
    try {
      const tokenKey = `refresh_token:${refreshToken}`;
      await this.redisCacheService.del(tokenKey);
      return;
    } catch (error) {
      return { error };
    }
  }
}
